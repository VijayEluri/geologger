/*	DeviceConnection.java

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License version 2.x,
	as published by	the Free Software Foundation;

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.util.*;
import java.util.concurrent.*;

public class DeviceConnection
{	
	
	// native events to be accessed via JNI
	private native int open( String port );
	private native void puts( String data );
	private native String gets();
	private native void startGetsAsync();
	private native void endGetsAsync();
	private native void setBaud( int baudrate );
	private native int getBaud();
	private native void close();
	private native int getState();

	private DeviceState state;
	
	private Thread async;
	private final Set< DeviceListener > callbacks;
	
	public DeviceConnection()
	{
		Set< DeviceListener > temp = new HashSet< DeviceListener >();
		callbacks = Collections.synchronizedSet( temp );
		state = DeviceState.CLOSED;
	}
	
	public void connect( String port )
	{
		if( state.compareTo( DeviceState.CLOSED ) <= 0 )
		{
			open( port );
		}
	}

	public void connect( String port, int baudrate )
	{
		if( state.compareTo( DeviceState.CLOSED ) <= 0 )
		{
			open( port );
			setBaud( baudrate );
		}
	}
	
	public void disconnect()
	{
		System.out.println( state.compareTo( DeviceState.OPEN ) );
		if( state.compareTo( DeviceState.OPEN ) >= 0 )
		{
			close();
			async = null;
		}
	}

	public void beginReceiveAsync()
	{
		if( async == null && state == DeviceState.OPEN )
		{
			System.out.println( "beginReceiveAsync" );
			async = new Thread( new Runnable() {
				public void run() {
					startGetsAsync();
				}			
			}, "DeviceConnection::ReceiveAsync" );
			async.start();
		}
	}
	
	public void endReceiveAsync()
	{
		System.out.println( "endReceiveAsync: " + state );
		if( async != null && state == DeviceState.ASYNC )
		{
			endGetsAsync();
			// wait for the thread to finish, mebbe?
			async = null;
		}
	}
	
	public void addDeviceListener( DeviceListener listener )
	{
		if( listener != null )
		{
			System.out.println( "addDeviceListener" );
			callbacks.add( listener );
		}
	}
	
	public void removeDeviceListener( DeviceListener listener )
	{
		System.out.println( "removeDeviceListener" );
		callbacks.remove( listener );
	}
	
	private void raiseDataEvent( int len, String data )
	{
		// raised through JNI by startGetsAsync in DeviceConnection.jnilib
		deviceDataEvent( DeviceListener.Direction.RECEIVE, len, data );
	}
	
	private void deviceDataEvent( final DeviceListener.Direction dir, final int len, final String data )
	{
		final DeviceConnection finalThis = this;
					   
		// anonymous class
		new Thread( new Runnable() {
			public synchronized void run()
			{
				for( DeviceListener listener : callbacks )
				{
					if( listener != null )
					{
						listener.deviceDataEvent( finalThis, dir, len, data );
					}
					else
					{
						callbacks.remove( listener );
					}
				}
			}
		}, "DeviceConnection::deviceDataEvent" ).start();
	
	}
	
	private void deviceStateEvent( final int state )
	{
		this.state = DeviceState.getState( state );
		
		final DeviceConnection finalThis = this;
		final DeviceState finalState = this.state;
		
		// anonymous class
		new Thread( new Runnable() {
			public synchronized void run()
			{
				for( DeviceListener listener : callbacks )
				{
					if( listener != null )
					{	
						listener.deviceStateEvent( finalThis, finalState );
					}
					else
					{
						callbacks.remove( listener );
					}
				}
			}
		}, "DeviceConnection::deviceStateEvent" ).start();
	}
		
	public void send( String data )
	{
		puts( data );
		deviceDataEvent( DeviceListener.Direction.TRANSMIT, data.length(), data );
	}
	
	public DeviceState getDeviceState()
	{
		return DeviceState.getState( getState() );
	}
	
	public int getBaudRate()
	{
		return getBaud();
	}
	
	public void setBaudRate( int value )
	{
		setBaud( value );
	}
	
	static
	{
		System.loadLibrary( "DeviceConnection" );
	}

}